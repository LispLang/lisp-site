reasons:
  - title: Extensible
    desc: |
      [Reader macros](/wiki/reader-macros.html) allow new syntax (Decorators,
      list comprehensions) to be added to the language as libraries &ndash;
      portably &ndash; without modifying the implementation, ensuring the
      language stays up to date.
  - title: Fast
    desc: |
      Gradual typing and type inference ensure the compiler generates the
      fastest possible code.
  - title: Mature and Stable
    desc: |
      foo
  - title: Great Tools
    desc: |
      foo
  - title: Ecosystem
    desc: |
      Tons of readily available libraries, and [plenty of new
      ones](https://github.com/quicklisp/quicklisp-projects/issues) on the
      waiting list. Look at our [favorites](/wiki/recommended-libraries.html).
  - title: Modules
    desc: |
      Common Lisp's module system is explicit and beautiful, and lends itself to
      well-structured code on large codebases.
  - title: Concurrent
    desc: |
      [Parallelism](http://lparallel.org/), channel-based concurrency, async,
      [STM](/wiki/stm.html), data parallelism &ndash; you name it, you have it.
  - title: CLOS
    desc: |
      Common Lisp has a rich [object system](/wiki/clos.html) that solves [most
      common pitfalls](/wiki/clos.html#benefits) of other object systems.
